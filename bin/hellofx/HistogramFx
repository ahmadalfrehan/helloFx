package hellofx;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.control.CheckBox;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;  

public class HistogramFX extends Application {

    private static final int BINS = 256;
    private BufferedImage image;
    private HistogramDataset dataset;
    private XYChart.Series<String, Number> redSeries;
    private XYChart.Series<String, Number> greenSeries;
    private XYChart.Series<String, Number> blueSeries;

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Histogram");

        // Load image using BufferedImage
        try {
            image = ImageIO.read(new File("path/to/your/image.jpg"));
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        // Create the chart axes
        CategoryAxis xAxis = new CategoryAxis();
        NumberAxis yAxis = new NumberAxis();
        xAxis.setLabel("Value");
        yAxis.setLabel("Count");

        // Create the bar chart
        BarChart<String, Number> barChart = new BarChart<>(xAxis, yAxis);
        barChart.setTitle("Histogram");

        // Create the dataset and series
        dataset = new HistogramDataset();
        createSeries();

        // Add the series to the dataset
        dataset.addSeries("Red", redSeries.getData().stream()
                .map(data -> data.getYValue().intValue())
                .toArray());
        dataset.addSeries("Green", greenSeries.getData().stream()
                .map(data -> data.getYValue().intValue())
                .toArray());
        dataset.addSeries("Blue", blueSeries.getData().stream()
                .map(data -> data.getYValue().intValue())
                .toArray());

        // Add the series to the chart
        barChart.getData().addAll(redSeries, greenSeries, blueSeries);

        // Create checkboxes for series visibility control
        CheckBox redCheckBox = createCheckBox("Red", redSeries, Color.RED);
        CheckBox greenCheckBox = createCheckBox("Green", greenSeries, Color.GREEN);
        CheckBox blueCheckBox = createCheckBox("Blue", blueSeries, Color.BLUE);

        // Create a VBox for the checkboxes
        VBox checkBoxesBox = new VBox(5, redCheckBox, greenCheckBox, blueCheckBox);
        checkBoxesBox.setPadding(new Insets(10));

        // Create the root layout
        BorderPane root = new BorderPane();
        root.setCenter(barChart);
        root.setRight(checkBoxesBox);

        // Create the scene and set it to the stage
        Scene scene = new Scene(root, 800, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void createSeries() {
        redSeries = new XYChart.Series<>();
        greenSeries = new XYChart.Series<>();
        blueSeries = new XYChart.Series<>();

        // Calculate the histogram for each color component
        int[] redHistogram = getHistogram(image, 0);
        int[] greenHistogram = getHistogram(image, 1);
        int[] blueHistogram = getHistogram(image, 2);

        // Add data to the series
        for (int i = 0; i < BINS; i++) {
            redSeries.getData().add(new XYChart.Data<>(String.valueOf(i), redHistogram[i]));
            greenSeries.getData().add(new XYChart.Data<>(String.valueOf(i), greenHistogram[i]));
            blueSeries.getData().add(new XYChart.Data<>(String.valueOf(i), blueHistogram[i]));
        }
    }

    private int[] getHistogram(BufferedImage image, int component) {
        int[] histogram = new int[BINS];
        for (int i = 0; i < image.getWidth(); i++) {
            for (int j = 0; j < image.getHeight(); j++) {
                int color = image.getRGB(i, j);
                int value = 0;
                switch (component) {
                    case 0: // Red component
                        value = (color >> 16) & 0xFF;
                        break;
                    case 1: // Green component
                        value = (color >> 8) & 0xFF;
                        break;
                    case 2: // Blue component
                        value = color & 0xFF;
                        break;
                }
                histogram[value]++;
            }
        }
        return histogram;
    }

    private CheckBox createCheckBox(String label, XYChart.Series<String, Number> series, Color color) {
        CheckBox checkBox = new CheckBox(label);
        checkBox.setSelected(true);
        series.getNode().setVisible(true);
        series.getNode().setStyle("-fx-bar-fill: " + toRGBCode(color) + ";");
        checkBox.selectedProperty().addListener((observable, oldValue, newValue) ->
                series.getNode().setVisible(newValue));
        return checkBox;
    }

    private String toRGBCode(Color color) {
        return String.format("#%02X%02X%02X",
                (int) (color.getRed() * 255),
                (int) (color.getGreen() * 255),
                (int) (color.getBlue() * 255));
    }

    public static void main(String[] args) {
        launch(args);
    }
}
